name: Build Docker Image

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.0.0

    - name: Build the Nginx Docker
      uses: docker/build-push-action@v3.1.0
      with:
        context: .
        load: true
        # files: ./Dockerfile
        tags: justf/nginx-http2-brotli
        cache-to: type=gha,mode=max

    - name: Run nginx -V
      run: |
        docker run -t justf/nginx-http2-brotli nginx -V | sed 's/\-\-/\n\t--/g' | tee
    
    # Test Docker Nginx
    - name:  Install and setup mkcert
      env: 
        MKCERT_VERSION: v1.4.3
      run: |
        set -x
        sudo apt-get update && \
          sudo apt-get install -y libnss3-tools

        curl https://github.com/FiloSottile/mkcert/releases/download/${MKCERT_VERSION}/mkcert-${MKCERT_VERSION}-linux-amd64 --location --output /tmp/mkcert
        chmod 744 /tmp/mkcert
        sudo mv /tmp/mkcert /bin/mkcert
        mkcert -install

    - name: Create signed TLS certificates for localhost
      run: |
        mkcert -cert-file tests/localhost.crt -key-file tests/localhost.key localhost 0.0.0.0 ::1
    
    - name: Serve a static asset
      run: |
        # expand commands
        set -x

        ./run-docker.sh &

        sleep 2; docker ps
        curl -v --compressed localhost:8888 2>&1 | tee /tmp/out

        grep --fixed-strings --invert-match -i '< Server: nginx' /tmp/out > /dev/null
        grep --fixed-strings '< Content-Encoding: br' /tmp/out
        grep --fixed-strings '<p>It works!</p>' /tmp/out

        curl -v --compressed https://localhost:8889 2>&1 | tee /tmp/h2

        grep --fixed-strings '< HTTP/2 200' /tmp/h2
        grep --fixed-strings --invert-match -i '< server: nginx' /tmp/h2 > /dev/null
        grep --fixed-strings '<p>It works!</p>' /tmp/h2

        docker logs test_nginx

